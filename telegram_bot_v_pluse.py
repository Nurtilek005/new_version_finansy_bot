# import asyncio
# from telegram import ReplyKeyboardMarkup, KeyboardButton
#
# import logging
# import uuid
# from datetime import datetime
# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
# from google_sheets import add_operation, SPREADSHEET_ID, gc
# from json_manager import add_wallet, get_wallets, add_category, get_categories, add_subcategory, get_subcategories, \
#     delete_wallet, delete_category, delete_subcategory, get_currencies, add_currency, delete_currency, \
#     migrate_json_structure, load_data, check_balance, check_wallet_balance, update_wallet_balance, save_data
#
# GROUP_CHAT_ID =  -1002304215716  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
#
#
#
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ + –∫–Ω–æ–ø–∫–∏."""
#     data = load_data()
#     wallets = data.get("wallets", {})
#
#     buttons = [[InlineKeyboardButton(wallet, callback_data=f"wallet_{wallet}")] for wallet in wallets]
#     buttons.append([InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data="show_wallets_balance")])
#     buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
#     buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="delete_wallet")])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#
#     # ‚úÖ **–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (ReplyKeyboardMarkup)**
#
#     if update.message:
#         await update.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
#     elif update.callback_query and update.callback_query.message:
#         await update.callback_query.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
#     else:
#         logging.error("–û—à–∏–±–∫–∞ –≤ start(): update.callback_query.message = None")
#
# def generate_check_id():
#     """
#     –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —á–µ–∫–∞.
#     """
#     return str(uuid.uuid4())[:8]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ UUID
#
#
# async def show_wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     data = load_data()
#     wallets = data.get("wallets", {})
#
#     buttons = [[InlineKeyboardButton(wallet, callback_data=f"wallet_{wallet}")] for wallet in wallets]
#     buttons.append([InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data="show_wallets_balance")])
#     buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
#     buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="delete_wallet")])
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
#     buttons.append([
#         InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"),
#         InlineKeyboardButton("‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùó", callback_data="report_issue")
#     ])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#
#     if update.callback_query and update.callback_query.message:
#         await update.callback_query.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=reply_markup)
#     elif update.message:
#         await update.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=reply_markup)
#     else:
#         logging.error("–û—à–∏–±–∫–∞ –≤ show_wallet_menu(): update.callback_query –∏ update.message = None")
#
#
# async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
#     """
#     try:
#         operation_type = context.user_data.get("operation_type")
#         wallet_name = context.user_data.get("selected_wallet")
#
#         if not operation_type or not wallet_name:
#             if update.callback_query:
#                 await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#             else:
#                 await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#             return
#
#         categories = get_categories(operation_type, wallet_name)
#
#         buttons = [
#             [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
#             [InlineKeyboardButton(" üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
#         ]
#
#         for category in categories:
#             buttons.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])
#
#         buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])
#         reply_markup = InlineKeyboardMarkup(buttons)
#
#         if update.callback_query:
#             await update.callback_query.edit_message_text(
#                 text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}':",
#                 reply_markup=reply_markup
#             )
#         else:
#             await update.message.reply_text(
#                 text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}':",
#                 reply_markup=reply_markup
#             )
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")
#         if update.callback_query:
#             await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
#         else:
#             await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
#
# async def show_currency_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ—à–µ–ª—å–∫–∞ (–µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π).
#     """
#     wallet_name = context.user_data.get("selected_wallet")
#
#     if not wallet_name:
#         await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
#         return
#
#     currencies = get_currencies(wallet_name)
#
#     if not currencies:
#         await update.callback_query.edit_message_text(
#             "‚ùå –í —ç—Ç–æ–º –∫–æ—à–µ–ª—å–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–ª—é—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª—é—Ç—É!",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")],
#                 [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")]
#             ])
#         )
#         return
#
#     buttons = [[InlineKeyboardButton(currency, callback_data=f"currency_{currency}")] for currency in currencies]
#     buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")])
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])
#
#     await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))
#
# async def show_subcategories(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
#     """
#     try:
#         operation_type = context.user_data.get("operation_type")
#         wallet_name = context.user_data.get("selected_wallet")
#         category_name = context.user_data.get("selected_category")
#
#         if not operation_type or not wallet_name or not category_name:
#             await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é.")
#             return
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
#         categories = get_categories(operation_type, wallet_name)
#         if category_name not in categories:
#             await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é.")
#             await back_to_category_menu(update, context)
#             return
#
#         # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#         subcategories = get_subcategories(operation_type, wallet_name, category_name)
#
#         # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
#         buttons = [
#             [InlineKeyboardButton(subcat, callback_data=f"subcategory_{subcat}")]
#             for subcat in subcategories
#         ]
#         buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")])
#         buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_subcategory")])  # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
#         buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])
#
#         reply_markup = InlineKeyboardMarkup(buttons)
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
#         if update.callback_query:
#             await update.callback_query.edit_message_text(
#                 text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                 reply_markup=reply_markup
#             )
#         else:
#             await update.message.reply_text(
#                 text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                 reply_markup=reply_markup
#             )
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ show_subcategories: {e}")
#         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# async def back_to_category_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
#     """
#     query = update.callback_query
#     operation_type = context.user_data.get("operation_type")
#     wallet_name = context.user_data.get("selected_wallet")
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∫–æ—à–µ–ª–µ–∫
#     if not operation_type or not wallet_name:
#         await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     categories = get_categories(operation_type, wallet_name)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     if not categories:
#         await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
#                                       reply_markup=InlineKeyboardMarkup([
#                                           [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
#                                           [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")]
#                                       ]))
#         return
#
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     buttons = [[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories]
#     buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")])
#     buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")])
#     buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#     await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
#
# async def back_to_subcategory_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
#     """
#     query = update.callback_query
#     wallet_name = context.user_data.get("selected_wallet")
#     category_name = context.user_data.get("selected_category")
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∫–æ—à–µ–ª–µ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
#     if not wallet_name or not category_name:
#         await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     subcategories = get_subcategories(wallet_name, category_name)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     if not subcategories:
#         await query.edit_message_text(
#             f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
#                 [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
#             ])
#         )
#         return
#
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     buttons = [[InlineKeyboardButton(subcat, callback_data=f"subcategory_{subcat}")] for subcat in subcategories]
#     buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")])
#     buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])
#
#     # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     reply_markup = InlineKeyboardMarkup(buttons)
#     await query.edit_message_text(
#         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
#         reply_markup=reply_markup
#     )
# async def currency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã.
#     """
#     query = update.callback_query
#
#     # –°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
#     available_currencies = ["USD", "EUR", "RUB", "KZT"]
#     buttons = [
#         [InlineKeyboardButton(currency, callback_data=f"currency_{currency}")]
#         for currency in available_currencies
#     ]
#     buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])
#
#     await query.edit_message_text(
#         text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
#         reply_markup=InlineKeyboardMarkup(buttons)
#     )
# async def add_currency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –∫–æ—à–µ–ª–µ–∫.
#     """
#     wallet_name = context.user_data.get("selected_wallet")
#
#     if not wallet_name:
#         await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
#         return
#
#     context.user_data["action"] = "add_currency"
#
#     await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: üí∞")
#
#
#
#
# async def delete_currency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã. –ï—Å–ª–∏ –≤–∞–ª—é—Ç –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç.
#     """
#     query = update.callback_query
#     operation_type = context.user_data.get("operation_type")
#     wallet_name = context.user_data.get("selected_wallet")
#     category_name = context.user_data.get("selected_category")
#     subcategory_name = context.user_data.get("selected_subcategory")
#
#     if not (operation_type and wallet_name and category_name and subcategory_name):
#         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     currencies = get_currencies(operation_type, wallet_name, category_name, subcategory_name)
#
#     # üî• –ï—Å–ª–∏ –≤–∞–ª—é—Ç –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç
#     if not currencies:
#         await query.edit_message_text(
#             "üíµ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")],
#                 [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")]
#             ])
#         )
#         return
#
#     # ‚úÖ –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
#     buttons = [[InlineKeyboardButton(currency, callback_data=f"deletecurrency_{currency}")] for currency in currencies]
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#     await query.edit_message_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
#
# async def edit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É, –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
#     """
#     await update.callback_query.edit_message_text(
#         "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
#     )
#     context.user_data["action"] = "add_amount"  # **–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ handle_amount**
#
# async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–µ –¥–∞–µ—Ç —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å.
#     """
#     try:
#         action = context.user_data.get("action")
#         if action != "add_amount":
#             await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—É–º–º—ã. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
#             return
#
#         amount_text = update.message.text.strip()
#         if not amount_text.isdigit():
#             await update.message.reply_text("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             return
#
#         amount = float(amount_text)
#         context.user_data["amount"] = amount
#
#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
#         wallet_name = context.user_data.get("selected_wallet")
#         data = load_data()
#         wallet_balance = data["wallets"].get(wallet_name, {}).get("balance", 0)
#
#         # **‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ä–∞—Å—Ö–æ–¥–æ–º**
#         if context.user_data.get("operation_type") == "expense" and amount > wallet_balance:
#             await update.message.reply_text(
#                 f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {wallet_balance}, –∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å {amount}.",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")],
#                     [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="edit_amount")]
#                 ])
#             )
#             return  # ‚ùå **–ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!**
#
#         # ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
#         context.user_data.pop("action", None)
#         await update.message.reply_text("–°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
#         context.user_data["action"] = "add_comment"
#
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_amount: {e}")
#         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏.
#     """
#     try:
#         action = context.user_data.get("action")
#         if action != "add_comment":
#             await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
#             return
#
#         comment = update.message.text.strip()
#         context.user_data["comment"] = comment
#         context.user_data.pop("action", None)
#         await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
#
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_comment: {e}")
#         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#
# async def handle_receipt_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT –∏ —Ç. –¥.) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É —Å ID —á–µ–∫–∞.
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
#         if not update.message.document:
#             await update.message.reply_text(
#                 "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_receipt")]
#                 ]))
#             return
#
#         document = update.message.document
#         file_id = document.file_id  # ID —Ñ–∞–π–ª–∞
#         file_name = document.file_name  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
#         check_id = generate_check_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —á–µ–∫–∞
#
#         # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É
#         await context.bot.send_document(
#             chat_id=GROUP_CHAT_ID,
#             document=file_id,
#             caption=f"üßæ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ `{file_name}` —Å ID: `{check_id}`",
#             parse_mode="Markdown"
#         )
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         context.user_data["receipt_id"] = check_id
#
#         # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —á–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω
#         await update.message.reply_text(
#             "‚úÖ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é...",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫", callback_data="check_wallet_balance")],
#                 [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", callback_data="start")]
#             ])
#         )
#
#         # **–í—ã–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**
#         await save_operation_and_return_to_start(update, context)
#
#     except Exception as e:
#         logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_receipt_document: {e}")
#         await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#
# async def handle_receipt_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, –∑–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
#         if not update.message.photo:
#             await update.message.reply_text("–û—à–∏–±–∫–∞: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
#             return
#
#         photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)
#         file_id = photo.file_id  # ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –≤ Telegram
#         check_id = generate_check_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–µ–∫–∞
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É —Å ID —á–µ–∫–∞
#         await context.bot.send_photo(
#             chat_id=GROUP_CHAT_ID,
#             photo=file_id,
#             caption=f"–ß–µ–∫ —Å ID: {check_id}"
#         )
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         context.user_data["receipt_id"] = check_id
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É
#         await save_operation(context)
#
#         # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
#         await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.")
#
#         # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
#         context.user_data.clear()
#
#         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
#         await start(update, context)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_receipt_photo: {e}")
#         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# async def back_to_wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞.
#     """
#     query = update.callback_query
#     wallets = get_wallets()
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—à–µ–ª—å–∫–∏
#     if not wallets:
#         await query.edit_message_text("–ö–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫.",
#                                       reply_markup=InlineKeyboardMarkup([
#                                           [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")]
#                                       ]))
#         return
#
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
#     buttons = [[InlineKeyboardButton(wallet, callback_data=f"wallet_{wallet}")] for wallet in wallets]
#     buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
#     reply_markup = InlineKeyboardMarkup(buttons)
#     await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=reply_markup)
# async def operation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥). –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
#     """
#     query = update.callback_query
#     operation_type = "income" if query.data == "operation_income" else "expense"
#     context.user_data["operation_type"] = operation_type
#
#     wallet_name = context.user_data.get("selected_wallet")
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
#     categories = get_categories(operation_type, wallet_name)
#
#     if not categories:
#         await query.edit_message_text(
#             text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {'–¥–æ—Ö–æ–¥–∞' if operation_type == 'income' else '—Ä–∞—Å—Ö–æ–¥–∞'} –Ω–µ—Ç.\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
#                 [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")]
#             ])
#         )
#         return
#
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     buttons = [[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories]
#     buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")])
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])
#
#     await query.edit_message_text(
#         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {'–î–æ—Ö–æ–¥' if operation_type == 'income' else '–†–∞—Å—Ö–æ–¥'}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#         reply_markup=InlineKeyboardMarkup(buttons)
#     )
#
#
# async def wallet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç."""
#     query = update.callback_query
#     wallet_name = query.data.split("_")[1]
#     context.user_data["selected_wallet"] = wallet_name
#
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –≤–∞–ª—é—Ç
#     await dispaly_wallet_balance(update, context)
#
#     # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
#     buttons = [
#         [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥", callback_data="operation_income")],
#         [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="operation_expense")],
#         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_wallets_balance")]
#     ]
#
#     await query.edit_message_text(
#         text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—à–µ–ª–µ–∫: {wallet_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
#         reply_markup=InlineKeyboardMarkup(buttons)
#     )
#
# async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
#     """
#     query = update.callback_query
#     category_name = query.data.split("_")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     wallet_name = context.user_data.get("selected_wallet")  # –ö–æ—à–µ–ª–µ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#     operation_type = context.user_data.get("operation_type")  # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#
#     if not wallet_name or not operation_type:
#         await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#     context.user_data["selected_category"] = category_name
#
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     subcategories = get_subcategories(operation_type, wallet_name, category_name)
#
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     buttons = [
#         [InlineKeyboardButton(sub, callback_data=f"subcategory_{sub}")] for sub in subcategories
#     ]
#     buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")])
#     buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])
#
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
#     await query.edit_message_text(
#         text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#         reply_markup=InlineKeyboardMarkup(buttons)
#     )
#
#
# async def subcategory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
#     """
#     query = update.callback_query
#     subcategory_name = query.data.split("_")[1]
#     context.user_data["selected_subcategory"] = subcategory_name
#
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–∞–ª—é—Ç
#     await query.edit_message_text(
#         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {subcategory_name}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
#         reply_markup=InlineKeyboardMarkup([
#             [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")],
#             [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="delete_currency")],
#             [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
#         ])
#     )
#
#
#
# async def add_subcategory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
#     wallet_name = context.user_data.get("selected_wallet")
#     category_name = context.user_data.get("selected_category")
#
#     if not wallet_name or not category_name:
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     if update.callback_query:
#         await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
#     else:
#         await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
#
#     context.user_data["action"] = "add_subcategory"
#
#
#
# async def delete_subcategory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–∞–ª—é—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è.
#     """
#     query = update.callback_query
#     operation_type = context.user_data.get("operation_type")
#     wallet_name = context.user_data.get("selected_wallet")
#     category_name = context.user_data.get("selected_category")
#
#     if not operation_type or not wallet_name or not category_name:
#         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
#         return
#
#     subcategories = get_subcategories(operation_type, wallet_name, category_name)
#
#     if not subcategories:
#         await query.edit_message_text(
#             "üìÇ –ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
#                 [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
#             ])
#         )
#         return
#
#     buttons = [[InlineKeyboardButton(subcat, callback_data=f"deletesubcat_{subcat}")] for subcat in subcategories]
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#     await query.edit_message_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–∞–ª—é—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è):", reply_markup=reply_markup)
#
# async def set_bot_commands(application):
#     """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram (Bot Menu)."""
#     commands = [
#         ("update", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
#         ("report", "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùó")
#     ]
#     await application.bot.set_my_commands(commands)
#
# def get_main_keyboard():
#     """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
#     keyboard = [
#         ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"]
#     ]
#     return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
# async def add_wallet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
#     context.user_data["action"] = "add_wallet"
#
#     if update.callback_query:
#         await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")
#     elif update.message:
#         await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")
#     else:
#         logging.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
#
# async def add_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
#     query = update.callback_query
#     wallet_name = context.user_data.get("selected_wallet")
#     operation_type = context.user_data.get("operation_type")
#
#     if not wallet_name or not operation_type:
#         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     context.user_data["action"] = "add_category"
#
#     await query.edit_message_text(
#         "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
#     )
#
#
#
# async def delete_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
#     """
#     query = update.callback_query
#     operation_type = context.user_data.get("operation_type")
#     wallet_name = context.user_data.get("selected_wallet")
#
#     if not operation_type or not wallet_name:
#         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     categories = get_categories(operation_type, wallet_name)
#
#     # üî• –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#     if not categories:
#         await query.edit_message_text(
#             "üìÇ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",  # ‚ú® –£–ª—É—á—à–∏–ª —Ç–µ–∫—Å—Ç
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
#                 [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
#             ])
#         )
#         return
#
#     # ‚úÖ –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
#     buttons = [[InlineKeyboardButton(cat, callback_data=f"deletecat_{cat}")] for cat in categories]
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#     await query.edit_message_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
#
# async def confirm_delete_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
#     """
#     query = update.callback_query
#     try:
#         operation_type = context.user_data.get("operation_type")
#         wallet_name = context.user_data.get("selected_wallet")
#         category_name = query.data.split("_")[1]  # –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
#
#         # –õ–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
#         logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: operation_type={operation_type}, wallet_name={wallet_name}, category_name={category_name}")
#
#         # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
#         if delete_category(operation_type, wallet_name, category_name):
#             logging.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
#             await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
#             # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#             await back_to_category_menu(update, context)
#         else:
#             logging.info(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
#             await query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_category: {e}")
#         if query and query.message:
#             await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         else:
#             logging.error("query.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
# async def send_message(update, text):
#     """
#     –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –∏ callback-–∑–∞–ø—Ä–æ—Å—ã.
#     """
#     if update.message:
#         await update.message.reply_text(text)
#     elif update.callback_query and update.callback_query.message:
#         await update.callback_query.message.edit_text(text)
#     else:
#         logging.error(f"‚ùå –û—à–∏–±–∫–∞: {text} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äì update.message –∏ update.callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
#
#
# async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–≤–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å—É–º–º—É, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–∞–ª—é—Ç—É.
#     """
#     try:
#         action = context.user_data.get("action")
#         if not action:
#             await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
#             return
#
#         text = update.message.text.strip()
#         if not text:
#             await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             return
#
#         logging.debug(f"üì• TEXT_HANDLER: Action = {action}, User input = {text}")
#
#         # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
#         if action == "add_wallet":
#             wallet_name = f"üí∞ {text}"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫–æ—à–µ–ª—å–∫–∞
#
#             wallets = get_wallets()
#             if wallet_name in wallets:
#                 await update.message.reply_text(f"‚ùå –ö–æ—à–µ–ª—ë–∫ '{wallet_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
#             else:
#                 if add_wallet(wallet_name):
#                     await update.message.reply_text(f"‚úÖ –ö–æ—à–µ–ª—ë–∫ '{wallet_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
#                     await show_wallet_menu(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
#
#                 else:
#                     await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#             context.user_data.pop("action", None)
#
#         # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#         elif action == "add_category":
#             operation_type = context.user_data.get("operation_type")
#             wallet_name = context.user_data.get("selected_wallet")
#
#             if not operation_type or not wallet_name:
#                 await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#                 return
#
#             category_name = f"üìÇ {text}"
#
#             if add_category(operation_type, wallet_name, category_name):
#                 await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
#             else:
#                 await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
#
#             context.user_data.pop("action", None)
#             await show_categories(update, context)
#
#         # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#         elif action == "add_subcategory":
#             operation_type = context.user_data.get("operation_type")
#             wallet_name = context.user_data.get("selected_wallet")
#             category_name = context.user_data.get("selected_category")
#
#             if not operation_type or not wallet_name or not category_name:
#                 await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#                 return
#
#             subcategory_name = f"üè∑Ô∏è {text}"
#
#             if add_subcategory(operation_type, wallet_name, category_name, subcategory_name):
#                 await update.message.reply_text(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
#             else:
#                 await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
#
#             context.user_data.pop("action", None)
#             await show_subcategories(update, context)
#
#         # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
#         elif action == "add_currency":
#             wallet_name = context.user_data.get("selected_wallet")
#
#             if not wallet_name:
#                 await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
#                 return
#
#             currency_name = text.strip().upper()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
#
#             data = load_data()
#             wallet = data["wallets"].get(wallet_name, {})
#
#             # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É "currencies", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
#             if "currencies" not in wallet or not isinstance(wallet["currencies"], dict):
#                 wallet["currencies"] = {}  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å
#                 save_data(data)
#                 logging.warning(f"‚ö† –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ 'currencies' –≤ –∫–æ—à–µ–ª—å–∫–µ '{wallet_name}'.")
#
#             if currency_name in wallet["currencies"]:
#                 await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª—é—Ç–∞ '{currency_name}' —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ.")
#                 return
#
#             wallet["currencies"][currency_name] = 0  # –°–æ–∑–¥–∞–µ–º –≤–∞–ª—é—Ç—É —Å –±–∞–ª–∞–Ω—Å–æ–º 0
#
#             save_data(data)
#
#             logging.info(f"‚úÖ –í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—à–µ–ª–µ–∫ '{wallet_name}'.")
#
#             await update.message.reply_text(f"‚úÖ –í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—à–µ–ª–µ–∫ '{wallet_name}'!")
#
#             context.user_data.pop("action", None)
#
#             # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤–∞–ª—é—Ç
#             currencies = get_currencies(wallet_name)
#             buttons = [[InlineKeyboardButton(currency, callback_data=f"currency_{currency}")] for currency in currencies]
#             buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")])
#             buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])
#
#             reply_markup = InlineKeyboardMarkup(buttons)
#             await update.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=reply_markup)
#
#         # ‚úÖ –í–≤–æ–¥ —Å—É–º–º—ã
#         elif action == "add_amount":
#             if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
#                 context.user_data["amount"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
#             else:
#                 try:
#                     context.user_data["amount"] = float(text)
#                 except ValueError:
#                     await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
#                     return
#
#             context.user_data.pop("action", None)
#             await update.message.reply_text(
#                 "‚úç –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
#                 ])
#             )
#             context.user_data["action"] = "add_comment"
#
#         # ‚úÖ –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
#         elif action == "add_comment":
#             if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
#                 context.user_data["comment"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
#             else:
#                 context.user_data["comment"] = text
#
#             context.user_data.pop("action", None)
#             await update.message.reply_text(
#                 "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_receipt")]
#                 ])
#             )
#             context.user_data["action"] = "upload_receipt"
#
#         else:
#             logging.warning(f"‚ö†Ô∏è UNKNOWN ACTION: {action}")
#             await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ.")
#
#     except Exception as e:
#         logging.error(f"‚ùå ERROR in text_handler: {e}", exc_info=True)
#         await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# async def confirm_delete_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–æ –≤–∞–ª—é—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è."""
#     query = update.callback_query
#     operation_type = context.user_data.get("operation_type")
#     wallet_name = context.user_data.get("selected_wallet")
#     category_name = context.user_data.get("selected_category")
#     subcategory_name = query.data.split("_")[1]
#
#     if delete_subcategory(operation_type, wallet_name, category_name, subcategory_name):
#         await query.edit_message_text(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (–≤–∞–ª—é—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞).")
#         await show_subcategories(update, context)
#     else:
#         await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '{subcategory_name}'.")
#
# async def delete_wallet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
#     """
#     wallets = get_wallets()
#
#     if not wallets:
#         await update.callback_query.edit_message_text(
#             "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")]
#             ])
#         )
#         return
#
#     buttons = [[InlineKeyboardButton(wallet, callback_data=f"deletewallet_{wallet}")] for wallet in wallets]
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
#
#     await update.callback_query.edit_message_text(
#         "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
#         reply_markup=InlineKeyboardMarkup(buttons)
#     )
# async def confirm_delete_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.
#     """
#     query = update.callback_query
#     operation_type = context.user_data.get("operation_type")
#     wallet_name = context.user_data.get("selected_wallet")
#     category_name = context.user_data.get("selected_category")
#     subcategory_name = context.user_data.get("selected_subcategory")
#     currency_name = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
#     if not (operation_type and wallet_name and category_name and subcategory_name and currency_name):
#         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
#         return
#
#     # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É
#     if delete_currency(operation_type, wallet_name, category_name, subcategory_name, currency_name):
#         await query.edit_message_text(f"‚úÖ –í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
#         await show_currency_menu(update, context)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤–∞–ª—é—Ç
#     else:
#         await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É '{currency_name}'.")
#
#
# async def confirm_delete_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –≤–∞–ª—é—Ç.
#     """
#     query = update.callback_query
#     wallet_name = query.data.split("_")[1]
#
#     data = load_data()
#     if wallet_name not in data["wallets"]:
#         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
#         return
#
#     del data["wallets"][wallet_name]
#     save_data(data)
#
#     await query.edit_message_text(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ '{wallet_name}' –∏ –≤—Å–µ –µ–≥–æ –≤–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
#     await show_wallet_menu(update, context)
#
# async def show_wallets_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ö –±–∞–ª–∞–Ω—Å–∞."""
#     data = load_data()
#     wallets = data.get("wallets", {})
#
#     if not wallets:
#         await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π!", show_alert=True)
#         return
#
#     buttons = [[InlineKeyboardButton(wallet, callback_data=f"balance_{wallet}")] for wallet in wallets]
#     buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
#
#     reply_markup = InlineKeyboardMarkup(buttons)
#
#     await update.callback_query.edit_message_text(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –±–∞–ª–∞–Ω—Å:", reply_markup=reply_markup
#     )
#
# async def send_reply(update: Update, text, parse_mode=None):
#         """
#         –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å `update.message`, –∏ —Å `callback_query`).
#         """
#         try:
#             if update.message:
#                 await update.message.reply_text(text, parse_mode=parse_mode)
#             elif update.callback_query and update.callback_query.message:
#                 await update.callback_query.message.reply_text(text, parse_mode=parse_mode)
#             else:
#                 logging.error(
#                     f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {text} (update.message –∏ update.callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç).")
#         except Exception as e:
#             logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_reply: {e}", exc_info=True)
#
#
# async def dispaly_wallet_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–æ –≤—Å–µ–º–∏ –≤–∞–ª—é—Ç–∞–º–∏."""
#     try:
#         wallet_name = context.user_data.get("selected_wallet")
#
#         if not wallet_name:
#             await context.bot.send_message(
#                 chat_id=update.effective_chat.id, text="‚ùå –û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω."
#             )
#             return
#
#         # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#         data = load_data()
#         wallet = data["wallets"].get(wallet_name, {})
#
#         if "currencies" not in wallet or not wallet["currencies"]:
#             await context.bot.send_message(
#                 chat_id=update.effective_chat.id, text=f"üí∞ –ö–æ—à–µ–ª–µ–∫ '{wallet_name}' –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤."
#             )
#             return
#
#         # üî• –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º
#         balances_text = "\n".join(
#             [f"üíµ {currency}: {balance}" for currency, balance in wallet["currencies"].items()]
#         )
#
#         await update.message.reply_text(
#             text=f"üìä *–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞* '{wallet_name}':\n{balances_text}",
#             parse_mode="Markdown",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
#             ])
#         )
#
#     except Exception as e:
#         logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ dispaly_wallet_balance: {e}")
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#
# async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫."""
#
#
#     query = update.callback_query
#     if "prev_menu" not in context.user_data:
#         context.user_data["prev_menu"] = []
#     try:
#         if query is None:
#             if update.message:
#                 await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
#             logging.error("‚ùå –û—à–∏–±–∫–∞: callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
#             return
#
#
#         elif query.data == "show_wallets_balance":
#
#             await show_wallets_balance(update, context)
#
#
#         elif query.data == "check_wallet_balance":
#
#             context.user_data["checking_balance"] = True
#
#             wallets = get_wallets()
#
#             if not wallets:
#
#                 if query.message:
#
#                     await query.message.edit_text(
#
#                         "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.",
#
#                         reply_markup=InlineKeyboardMarkup([
#
#                             [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")],
#
#                             [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]  # ‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
#
#                         ])
#
#                     )
#
#                 else:
#
#                     await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
#
#                 return
#
#             buttons = [[InlineKeyboardButton(wallet, callback_data=f"balance_{wallet}")] for wallet in wallets]
#
#             buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])
#
#             buttons.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
#
#             if query.message:
#
#                 await query.message.edit_text(
#
#                     "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å:",
#
#                     reply_markup=InlineKeyboardMarkup(buttons)
#
#                 )
#
#             else:
#
#                 await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
#
#
#         elif query.data.startswith("balance_"):
#
#             wallet_name = query.data.split("_")[1]
#
#             context.user_data["selected_wallet"] = wallet_name  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
#
#             await dispaly_wallet_balance(update, context)
#
#         elif query.data == "add_wallet":
#             await add_wallet_handler(update, context)
#         elif query.data == "delete_wallet":
#             await delete_wallet_handler(update, context)
#
#         elif query.data.startswith("deletewallet_"):
#             await confirm_delete_wallet(update, context)
#         await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞ Telegram
#         logging.info(f"callback_query: {query.data}")
#
#         # ‚úÖ –í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞
#         if query.data.startswith("wallet_"):
#             context.user_data["prev_menu"].append("wallet_menu")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
#             wallet_name = query.data.split("_")[1]
#             context.user_data["selected_wallet"] = wallet_name
#
#             await query.edit_message_text(
#                 text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—à–µ–ª–µ–∫: {wallet_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥", callback_data="operation_income")],
#                     [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="operation_expense")],
#                     [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
#                 ])
#             )
#
#         # ‚úÖ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥) ‚Üí –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#         elif query.data in ["operation_expense", "operation_income"]:
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
#             context.user_data["prev_menu"].append("wallet_menu")
#
#             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)
#             operation_type = "income" if query.data == "operation_income" else "expense"
#             context.user_data["operation_type"] = operation_type
#             wallet_name = context.user_data.get("selected_wallet")
#
#             categories = get_categories(operation_type, wallet_name)
#
#             if not categories:
#                 await query.edit_message_text(
#                     text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {'–¥–æ—Ö–æ–¥–∞' if operation_type == 'income' else '—Ä–∞—Å—Ö–æ–¥–∞'} –Ω–µ—Ç.\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
#                     reply_markup=InlineKeyboardMarkup([
#                         [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
#                         [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
#                         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
#                     ])
#                 )
#                 return
#
#             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#             await query.edit_message_text(
#                 text=f"üìÇ –í—ã –≤—ã–±—Ä–∞–ª–∏: {'–î–æ—Ö–æ–¥' if operation_type == 'income' else '–†–∞—Å—Ö–æ–¥'}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                 reply_markup=InlineKeyboardMarkup([
#                     *[[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories],
#                     [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
#                     [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
#                     [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
#                 ])
#             )
#
#         elif query.data == "add_category":
#             await add_category_handler(update, context)
#         elif query.data == "delete_category":
#             await delete_category_handler(update, context)
#
#         elif query.data.startswith("deletecat_"):
#             await confirm_delete_category(update, context)
#         # ‚úÖ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#         elif query.data.startswith("category_"):
#             context.user_data["prev_menu"].append("category_menu")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
#             category_name = query.data.split("_")[1]
#             context.user_data["selected_category"] = category_name
#
#             subcategories = get_subcategories(context.user_data["operation_type"], context.user_data["selected_wallet"],
#                                               category_name)
#
#             await query.edit_message_text(
#                 text=f"üè∑ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                 reply_markup=InlineKeyboardMarkup([
#                     *[[InlineKeyboardButton(subcat, callback_data=f"subcategory_{subcat}")] for subcat in
#                       subcategories],
#                     [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
#                     [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
#                 ])
#             )
#
#         elif query.data == "add_subcategory":
#             await add_subcategory_handler(update, context)
#         elif query.data == "delete_subcategory":
#             await delete_subcategory_handler(update, context)
#
#         elif query.data.startswith("deletesubcat_"):
#             await confirm_delete_subcategory(update, context)
#         # ‚úÖ –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
#         elif query.data.startswith("subcategory_"):
#             context.user_data["prev_menu"].append("subcategory_menu")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
#             subcategory_name = query.data.split("_")[1]
#             context.user_data["selected_subcategory"] = subcategory_name
#
#             await show_currency_menu(update, context)
#
#         elif query.data == "add_currency":
#             await add_currency_handler(update, context)
#         elif query.data == "delete_currency":
#             await delete_currency_handler(update, context)
#
#         elif query.data.startswith("deletecurrency_"):
#             await confirm_delete_currency(update, context)
#
#         # ‚úÖ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã ‚Üí –í–≤–æ–¥–∏–º —Å—É–º–º—É
#         elif query.data.startswith("currency_"):
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
#             context.user_data["prev_menu"].append("subcategory_menu")
#
#             currency_name = query.data.split("_")[1]
#             context.user_data["currency"] = currency_name
#
#             await query.edit_message_text(
#                 text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: {currency_name}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_amount")],
#                     [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")]
#                 ])
#             )
#             context.user_data["action"] = "add_amount"
#         elif query.data == "back_to_subcategory_menu":
#             await show_subcategories(update, context)  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#
#             context.user_data["action"] = "add_amount"
#
#         # ‚úÖ –ü—Ä–æ–ø—É—Å–∫ —Å—É–º–º—ã ‚Üí –í–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
#         elif query.data == "skip_amount":
#             context.user_data["amount"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
#             await query.edit_message_text(
#                 "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
#                 ])
#             )
#             context.user_data["action"] = "add_comment"
#
#         # ‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫
#         elif query.data == "skip_comment":
#             context.user_data["comment"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
#             await query.edit_message_text(
#                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_receipt")]
#                 ])
#             )
#             context.user_data["action"] = "upload_receipt"
#         elif query.data == "edit_amount":
#             await edit_amount(update, context)
#
#
#         # ‚úÖ –ü—Ä–æ–ø—É—Å–∫ —á–µ–∫–∞ ‚Üí –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#         elif query.data == "skip_receipt":
#             context.user_data["receipt_id"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
#             await save_operation(update,context)
#             await query.edit_message_text(
#                 "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="start")]
#                 ])
#             )
#         elif query.data == "dispaly_wallet_balance":
#             await dispaly_wallet_balance(update, context)
#             await update.message.reply_text(
#                 "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
#                 reply_markup=InlineKeyboardMarkup([
#                     [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", callback_data="start")]
#                 ])
#             )
#
#
#
#         elif query.data == "back":
#
#             if context.user_data["prev_menu"]:
#
#                 last_menu = context.user_data["prev_menu"].pop()  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é
#
#                 if last_menu == "wallet_menu":
#
#                     await show_wallet_menu(update, context)
#
#
#                 elif last_menu == "operation_menu":
#
#                     await callback_handler(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
#
#
#                 elif last_menu == "category_menu":
#
#                     await show_categories(update, context)
#
#
#                 elif last_menu == "subcategory_menu":
#
#                     await show_subcategories(update, context)
#
#
#                 elif last_menu == "currency_menu":
#
#                     await show_currency_menu(update, context)
#
#
#                 else:
#
#                     await show_wallet_menu(update, context)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#
#             else:
#
#                 await show_wallet_menu(update, context)  # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, –≤–µ—Ä–Ω–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#
#
#         elif query.data == "start":
#
#             await show_wallet_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#
#
#         # ‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚Üí –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#         elif query.data == "start":
#             await show_wallet_menu(update, context)  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ–Ω—é
#
#
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
#         await context.bot.send_message(chat_id=query.from_user.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# async def save_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –≤ –∫–æ—à–µ–ª—å–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ.
#     """
#     try:
#         wallet_name = context.user_data.get("selected_wallet")
#         operation_type = context.user_data.get("operation_type")
#         currency = context.user_data.get("currency")
#         amount = context.user_data.get("amount")
#
#         if not wallet_name or not currency or amount is None:
#             await send_reply(update, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
#             return
#
#         data = load_data()
#         wallet = data["wallets"].get(wallet_name, {})
#
#         if "currencies" not in wallet or not isinstance(wallet["currencies"], dict):
#             wallet["currencies"] = {}
#
#         if currency not in wallet["currencies"]:
#             wallet["currencies"][currency] = 0
#
#         current_balance = wallet["currencies"][currency]
#
#         if operation_type == "expense":
#             if current_balance < amount:
#                 await send_reply(update, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ {currency}! –ë–∞–ª–∞–Ω—Å: {current_balance}")
#                 return
#             new_balance = current_balance - amount
#         else:
#             new_balance = current_balance + amount
#
#         wallet["currencies"][currency] = new_balance
#         data["wallets"][wallet_name] = wallet
#         save_data(data)
#
#         logging.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å {currency} –≤ –∫–æ—à–µ–ª—å–∫–µ '{wallet_name}' –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")
#
#         await dispaly_wallet_balance(update, context)
#
#         context.user_data.clear()
#
#     except Exception as e:
#         logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ save_operation: {e}", exc_info=True)
#         await send_reply(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#
#
# async def save_operation_and_return_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     try:
#         # üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
#         wallet_name = context.user_data.get("selected_wallet", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#         operation_type = context.user_data.get("operation_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#         category_name = context.user_data.get("selected_category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#         subcategory_name = context.user_data.get("selected_subcategory", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#         currency = context.user_data.get("currency", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
#         amount = context.user_data.get("amount", 0)
#         comment = context.user_data.get("comment", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")
#         date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#
#         # üõë –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
#         logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {operation_type}, {wallet_name}, {category_name}, {subcategory_name}, {currency}, {amount}, {comment}")
#
#         # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —á–∏—Å–ª–æ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
#         if not isinstance(amount, (int, float)) or amount <= 0:
#             await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
#             return
#
#         # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ JSON
#         data = load_data()
#         wallet = data["wallets"].get(wallet_name, {})
#
#         if "currency_balances" not in wallet:
#             wallet["currency_balances"] = {}
#
#         if currency not in wallet["currency_balances"]:
#             wallet["currency_balances"][currency] = 0
#
#         current_balance = wallet["currency_balances"][currency]
#
#         # üî• –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥ / —Ä–∞—Å—Ö–æ–¥)
#         if operation_type == "expense":
#             new_balance = current_balance - amount
#         else:  # income
#             new_balance = current_balance + amount
#
#         wallet["currency_balances"][currency] = new_balance
#         data["wallets"][wallet_name] = wallet
#         save_data(data)  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
#
#         logging.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å {currency} –≤ –∫–æ—à–µ–ª—å–∫–µ '{wallet_name}' –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")
#
#         # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
#         operations_sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("–û–ø–µ—Ä–∞—Ü–∏–∏")
#         check_id = context.user_data.get("receipt_id", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")
#         operations_sheet.append_row([
#             date, operation_type, wallet_name, category_name, subcategory_name, currency, amount, comment, check_id
#         ])
#
#         logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É!")
#
#         # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Telegram —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#         await dispaly_wallet_balance(update, context)
#
#         # üîÑ –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         context.user_data.clear()
#
#     except Exception as e:
#         logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ —á–µ–∫–∞.
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
#         if not update.message or not update.message.photo:
#             await update.message.reply_text("–û—à–∏–±–∫–∞: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
#             return
#
#         photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
#         file_id = photo.file_id  # ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –≤ Telegram
#         check_id = generate_check_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–µ–∫–∞
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É —Å ID —á–µ–∫–∞
#         await context.bot.send_photo(
#             chat_id=GROUP_CHAT_ID,
#             photo=file_id,
#             caption=f"–ß–µ–∫ —Å ID: {check_id}"
#         )
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         context.user_data["receipt_id"] = check_id
#
#         # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç—É
#         await save_operation_and_return_to_start(update, context)
#
#     except AttributeError as e:
#         logging.error(f"–û—à–∏–±–∫–∞ AttributeError –≤ photo_handler: {e}")
#         if update.message:
#             await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         else:
#             logging.error("update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
#
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ photo_handler: {e}")
#         if update.message:
#             await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         else:
#             logging.error("update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
# async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
#     await start(update, context)
#     await update.message.reply_text("üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
#
#
# async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö."""
#     await update.message.reply_text(
#         "üîó –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —á–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ!",
#         reply_markup=InlineKeyboardMarkup([
#             [InlineKeyboardButton("‚úâ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url="https://t.me/mwnhn")]
#         ])
#     )
#
# def main():
#
#
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
#     migrate_json_structure()
#
#
#
#     application = Application.builder().token("7351753880:AAEVLbjdQp_etMQAIWp6flU-ZdjaQltVNAE").build()
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(CallbackQueryHandler(callback_handler))
#     application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
#     application.add_handler(MessageHandler(filters.PHOTO, handle_receipt_photo))
#     application.add_handler(MessageHandler(filters.Document.ALL, handle_receipt_document))
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
#     application.add_handler(CommandHandler("update", update_command))
#     application.add_handler(CommandHandler("report", report_command))
#     application.run_polling()
#
#
# if __name__ == "__main__":
#     main()
import asyncio
import asyncio
import asyncio
from telegram import ReplyKeyboardMarkup, KeyboardButton

import logging
import uuid
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from google_sheets import add_operation, SPREADSHEET_ID, gc
from json_manager import add_wallet, get_wallets, add_category, get_categories, add_subcategory, get_subcategories, \
    delete_wallet, delete_category, delete_subcategory, get_currencies, add_currency, delete_currency, \
    migrate_json_structure, load_data, check_balance, check_wallet_balance, update_wallet_balance, save_data

GROUP_CHAT_ID =  -1002304215716  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ + –∫–Ω–æ–ø–∫–∏."""
    data = load_data()
    wallets = data.get("wallets", {})

    buttons = [[InlineKeyboardButton(wallet, callback_data=f"wallet_{wallet}")] for wallet in wallets]
    buttons.append([InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data="show_wallets_balance")])
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
    buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="delete_wallet")])

    reply_markup = InlineKeyboardMarkup(buttons)

    # ‚úÖ **–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (ReplyKeyboardMarkup)**

    if update.message:
        await update.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    elif update.callback_query and update.callback_query.message:
        await update.callback_query.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        logging.error("–û—à–∏–±–∫–∞ –≤ start(): update.callback_query.message = None")

def generate_check_id():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —á–µ–∫–∞.
    """
    return str(uuid.uuid4())[:8]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ UUID


async def show_wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    wallets = data.get("wallets", {})

    buttons = [[InlineKeyboardButton(wallet, callback_data=f"wallet_{wallet}")] for wallet in wallets]
    buttons.append([InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data="show_wallets_balance")])
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])
    buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="delete_wallet")])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    buttons.append([
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"),
        InlineKeyboardButton("‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùó", callback_data="report_issue")
    ])

    reply_markup = InlineKeyboardMarkup(buttons)

    if update.callback_query and update.callback_query.message:
        await update.callback_query.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=reply_markup)
    else:
        logging.error("–û—à–∏–±–∫–∞ –≤ show_wallet_menu(): update.callback_query –∏ update.message = None")


async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
    """
    try:
        operation_type = context.user_data.get("operation_type")
        wallet_name = context.user_data.get("selected_wallet")

        if not operation_type or not wallet_name:
            if update.callback_query:
                await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
            else:
                await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
            return

        categories = get_categories(operation_type, wallet_name)

        buttons = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
            [InlineKeyboardButton(" üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
        ]

        for category in categories:
            buttons.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])

        buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])
        reply_markup = InlineKeyboardMarkup(buttons)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}':",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}':",
                reply_markup=reply_markup
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

async def show_currency_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ—à–µ–ª—å–∫–∞ (–µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π).
    """
    wallet_name = context.user_data.get("selected_wallet")

    if not wallet_name:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    currencies = get_currencies(wallet_name)

    if not currencies:
        await update.callback_query.edit_message_text(
            "‚ùå –í —ç—Ç–æ–º –∫–æ—à–µ–ª—å–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–ª—é—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª—é—Ç—É!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")]
            ])
        )
        return

    buttons = [[InlineKeyboardButton(currency, callback_data=f"currency_{currency}")] for currency in currencies]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")])
    buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="delete_currency")])  # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])

    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))
async def show_subcategories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        operation_type = context.user_data.get("operation_type")
        wallet_name = context.user_data.get("selected_wallet")
        category_name = context.user_data.get("selected_category")

        if not operation_type or not wallet_name or not category_name:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        categories = get_categories(operation_type, wallet_name)
        if category_name not in categories:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é.")
            await back_to_category_menu(update, context)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = get_subcategories(operation_type, wallet_name, category_name)

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        buttons = [
            [InlineKeyboardButton(subcat, callback_data=f"subcategory_{subcat}")]
            for subcat in subcategories
        ]
        buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")])
        buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_subcategory")])  # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])

        reply_markup = InlineKeyboardMarkup(buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=reply_markup
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_subcategories: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def back_to_category_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    query = update.callback_query
    operation_type = context.user_data.get("operation_type")
    wallet_name = context.user_data.get("selected_wallet")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∫–æ—à–µ–ª–µ–∫
    if not operation_type or not wallet_name:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = get_categories(operation_type, wallet_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not categories:
        await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                                          [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")]
                                      ]))
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")])
    buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")])
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

async def back_to_subcategory_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    query = update.callback_query
    wallet_name = context.user_data.get("selected_wallet")
    category_name = context.user_data.get("selected_category")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∫–æ—à–µ–ª–µ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if not wallet_name or not category_name:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcategories = get_subcategories(wallet_name, category_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not subcategories:
        await query.edit_message_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
            ])
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [[InlineKeyboardButton(subcat, callback_data=f"subcategory_{subcat}")] for subcat in subcategories]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")])
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=reply_markup
    )
async def currency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã.
    """
    query = update.callback_query

    # –°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
    available_currencies = ["USD", "EUR", "RUB", "KZT"]
    buttons = [
        [InlineKeyboardButton(currency, callback_data=f"currency_{currency}")]
        for currency in available_currencies
    ]
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
async def add_currency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –∫–æ—à–µ–ª–µ–∫.
    """
    wallet_name = context.user_data.get("selected_wallet")

    if not wallet_name:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    context.user_data["action"] = "add_currency"

    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: üí∞")




async def delete_currency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã. –ï—Å–ª–∏ –≤–∞–ª—é—Ç –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç.
    """
    query = update.callback_query
    wallet_name = context.user_data.get("selected_wallet")

    if not wallet_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    currencies = get_currencies(wallet_name)

    # üî• –ï—Å–ª–∏ –≤–∞–ª—é—Ç –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç
    if not currencies:
        await query.edit_message_text(
            "üíµ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")]
            ])
        )
        return

    # ‚úÖ –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    buttons = [[InlineKeyboardButton(currency, callback_data=f"deletecurrency_{currency}")] for currency in currencies]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def edit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É, –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
    """
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
    )
    context.user_data["action"] = "add_amount"  # **–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ handle_amount**

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–µ –¥–∞–µ—Ç —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å.
    """
    try:
        action = context.user_data.get("action")
        if action != "add_amount":
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—É–º–º—ã. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        amount_text = update.message.text.strip()
        if not amount_text.isdigit():
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        amount = float(amount_text)
        context.user_data["amount"] = amount

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        wallet_name = context.user_data.get("selected_wallet")
        data = load_data()
        wallet_balance = data["wallets"].get(wallet_name, {}).get("balance", 0)

        # **‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ä–∞—Å—Ö–æ–¥–æ–º**
        if context.user_data.get("operation_type") == "expense" and amount > wallet_balance:
            await update.message.reply_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {wallet_balance}, –∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å {amount}.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")],
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="edit_amount")]
                ])
            )
            return  # ‚ùå **–ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!**

        # ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        context.user_data.pop("action", None)
        await update.message.reply_text("–°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        context.user_data["action"] = "add_comment"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_amount: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        action = context.user_data.get("action")
        if action != "add_comment":
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        comment = update.message.text.strip()
        context.user_data["comment"] = comment
        context.user_data.pop("action", None)
        await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_comment: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def handle_receipt_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT –∏ —Ç. –¥.) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É —Å ID —á–µ–∫–∞.
    """
    try:
        if not update.message.document:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_receipt")]
                ]))
            return

        document = update.message.document
        file_id = document.file_id  # ID —Ñ–∞–π–ª–∞
        file_name = document.file_name  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        check_id = generate_check_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–µ–∫–∞

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É
        await context.bot.send_document(
            chat_id=GROUP_CHAT_ID,
            document=file_id,
            caption=f"üßæ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ `{file_name}` —Å ID: `{check_id}`",
            parse_mode="Markdown"
        )

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["receipt_id"] = check_id

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É–º–º–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if "amount" not in context.user_data or context.user_data["amount"] is None:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        await save_operation_and_return_to_start(update, context)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_receipt_document: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_receipt_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, –∑–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
    """
    try:
        if not update.message.photo:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
            return

        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)
        file_id = photo.file_id  # ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –≤ Telegram
        check_id = generate_check_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–µ–∫–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É —Å ID —á–µ–∫–∞
        await context.bot.send_photo(
            chat_id=GROUP_CHAT_ID,
            photo=file_id,
            caption=f"–ß–µ–∫ —Å ID: {check_id}"
        )

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data["receipt_id"] = check_id

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É–º–º–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if "amount" not in context.user_data or context.user_data["amount"] is None:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # **–í—ã–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏**
        await save_operation_and_return_to_start(update, context)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_receipt_photo: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def back_to_wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞.
    """
    query = update.callback_query
    wallets = get_wallets()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—à–µ–ª—å–∫–∏
    if not wallets:
        await query.edit_message_text("–ö–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫.",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")]
                                      ]))
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
    buttons = [[InlineKeyboardButton(wallet, callback_data=f"wallet_{wallet}")] for wallet in wallets]
    buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")])

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=reply_markup)
async def operation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥). –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    query = update.callback_query
    operation_type = "income" if query.data == "operation_income" else "expense"
    context.user_data["operation_type"] = operation_type

    wallet_name = context.user_data.get("selected_wallet")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    categories = get_categories(operation_type, wallet_name)

    if not categories:
        await query.edit_message_text(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {'–¥–æ—Ö–æ–¥–∞' if operation_type == 'income' else '—Ä–∞—Å—Ö–æ–¥–∞'} –Ω–µ—Ç.\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")]
            ])
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories]
    buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {'–î–æ—Ö–æ–¥' if operation_type == 'income' else '–†–∞—Å—Ö–æ–¥'}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def wallet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)."""
    query = update.callback_query
    wallet_name = query.data.split("_")[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
    context.user_data["selected_wallet"] = wallet_name

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    buttons = [
        [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥", callback_data="operation_income")],
        [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="operation_expense")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")]
    ]

    await query.edit_message_text(
        text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—à–µ–ª–µ–∫: {wallet_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    query = update.callback_query
    category_name = query.data.split("_")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    wallet_name = context.user_data.get("selected_wallet")  # –ö–æ—à–µ–ª–µ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    operation_type = context.user_data.get("operation_type")  # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    if not wallet_name or not operation_type:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data["selected_category"] = category_name

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = get_subcategories(operation_type, wallet_name, category_name)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [
        [InlineKeyboardButton(sub, callback_data=f"subcategory_{sub}")] for sub in subcategories
    ]
    buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")])
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
    await query.edit_message_text(
        text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def subcategory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    query = update.callback_query
    subcategory_name = query.data.split("_")[1]
    context.user_data["selected_subcategory"] = subcategory_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–∞–ª—é—Ç
    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {subcategory_name}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="delete_currency")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
        ])
    )



async def add_subcategory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    wallet_name = context.user_data.get("selected_wallet")
    category_name = context.user_data.get("selected_category")

    if not wallet_name or not category_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    if update.callback_query:
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

    context.user_data["action"] = "add_subcategory"



async def delete_subcategory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–∞–ª—é—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è.
    """
    query = update.callback_query
    operation_type = context.user_data.get("operation_type")
    wallet_name = context.user_data.get("selected_wallet")
    category_name = context.user_data.get("selected_category")

    if not operation_type or not wallet_name or not category_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    subcategories = get_subcategories(operation_type, wallet_name, category_name)

    if not subcategories:
        await query.edit_message_text(
            "üìÇ –ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
            ])
        )
        return

    buttons = [[InlineKeyboardButton(subcat, callback_data=f"deletesubcat_{subcat}")] for subcat in subcategories]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–∞–ª—é—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è):", reply_markup=reply_markup)

async def set_bot_commands(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram (Bot Menu)."""
    commands = [
        ("update", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
        ("report", "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùó")
    ]
    await application.bot.set_my_commands(commands)

def get_main_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "‚ùó –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
async def add_wallet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
    context.user_data["action"] = "add_wallet"

    if update.callback_query:
        await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")
    elif update.message:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")

async def add_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    wallet_name = context.user_data.get("selected_wallet")
    operation_type = context.user_data.get("operation_type")

    if not wallet_name or not operation_type:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    context.user_data["action"] = "add_category"

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
    )



async def delete_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    query = update.callback_query
    operation_type = context.user_data.get("operation_type")
    wallet_name = context.user_data.get("selected_wallet")

    if not operation_type or not wallet_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    categories = get_categories(operation_type, wallet_name)

    # üî• –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if not categories:
        await query.edit_message_text(
            "üìÇ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",  # ‚ú® –£–ª—É—á—à–∏–ª —Ç–µ–∫—Å—Ç
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")]
            ])
        )
        return

    # ‚úÖ –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    buttons = [[InlineKeyboardButton(cat, callback_data=f"deletecat_{cat}")] for cat in categories]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category_menu")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def confirm_delete_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    query = update.callback_query
    try:
        operation_type = context.user_data.get("operation_type")
        wallet_name = context.user_data.get("selected_wallet")
        category_name = query.data.split("_")[1]  # –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data

        # –õ–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: operation_type={operation_type}, wallet_name={wallet_name}, category_name={category_name}")

        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if delete_category(operation_type, wallet_name, category_name):
            logging.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await back_to_category_menu(update, context)
        else:
            logging.info(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
            await query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_category: {e}")
        if query and query.message:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            logging.error("query.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
async def send_message(update, text):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –∏ callback-–∑–∞–ø—Ä–æ—Å—ã.
    """
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query and update.callback_query.message:
        await update.callback_query.message.edit_text(text)
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {text} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äì update.message –∏ update.callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–≤–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å—É–º–º—É, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–∞–ª—é—Ç—É.
    """
    try:
        action = context.user_data.get("action")
        if not action:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        text = update.message.text.strip()
        if not text:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
        if action == "add_wallet":
            wallet_name = f"üí∞ {text}"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫–æ—à–µ–ª—å–∫–∞

            wallets = get_wallets()
            if wallet_name in wallets:
                await update.message.reply_text(f"‚ùå –ö–æ—à–µ–ª—ë–∫ '{wallet_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                if add_wallet(wallet_name):
                    await update.message.reply_text(f"‚úÖ –ö–æ—à–µ–ª—ë–∫ '{wallet_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

                    # üî• –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º show_wallet_menu, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
                    await show_wallet_menu(update, context)

                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            context.user_data.pop("action", None)


        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        elif action == "add_category":
            operation_type = context.user_data.get("operation_type")
            wallet_name = context.user_data.get("selected_wallet")

            if not operation_type or not wallet_name:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
                return

            category_name = f"üìÇ {text}"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            if add_category(operation_type, wallet_name, category_name):
                await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

            context.user_data.pop("action", None)
            await show_categories(update, context)

        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        elif action == "add_subcategory":
            operation_type = context.user_data.get("operation_type")
            wallet_name = context.user_data.get("selected_wallet")
            category_name = context.user_data.get("selected_category")

            if not operation_type or not wallet_name or not category_name:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
                return

            subcategory_name = f"üè∑Ô∏è {text}"  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            if add_subcategory(operation_type, wallet_name, category_name, subcategory_name):
                await update.message.reply_text(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

            context.user_data.pop("action", None)
            await show_subcategories(update, context)

        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã ‚Üí –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–∞–ª—é—Ç
        elif action == "add_currency":
            wallet_name = context.user_data.get("selected_wallet")

            if not wallet_name:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return

            currency_name = text.strip().upper()  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

            data = load_data()
            wallet = data["wallets"].get(wallet_name, {})

            if "currencies" not in wallet or not isinstance(wallet["currencies"], dict):
                wallet["currencies"] = {}  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ —Ç–∞–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

            if currency_name in wallet["currencies"]:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª—é—Ç–∞ '{currency_name}' —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ.")
                return

            wallet["currencies"][currency_name] = 0  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É —Å –±–∞–ª–∞–Ω—Å–æ–º 0
            data["wallets"][wallet_name] = wallet
            save_data(data)

            await update.message.reply_text(f"‚úÖ –í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—à–µ–ª–µ–∫ '{wallet_name}'!")

            context.user_data.pop("action", None)

            # üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
            currencies = get_currencies(wallet_name)

            buttons = [[InlineKeyboardButton(currency, callback_data=f"currency_{currency}")] for currency in
                       currencies]
            buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")])
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")])

            reply_markup = InlineKeyboardMarkup(buttons)

            await update.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=reply_markup)



        # ‚úÖ –í–≤–æ–¥ —Å—É–º–º—ã ‚Üí –ü–æ—Å–ª–µ —Å—É–º–º—ã –≤–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        elif action == "add_amount":
            if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                context.user_data["amount"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            else:
                try:
                    context.user_data["amount"] = float(text)
                except ValueError:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                    return

            context.user_data.pop("action", None)
            await update.message.reply_text(
                "‚úç –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
                ])
            )
            context.user_data["action"] = "add_comment"

        # ‚úÖ –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Üí –ü–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫
        elif action == "add_comment":
            if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                context.user_data["comment"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            else:
                context.user_data["comment"] = text

            context.user_data.pop("action", None)
            await update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_receipt")]
                ])
            )
            context.user_data["action"] = "upload_receipt"

        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ text_handler: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def confirm_delete_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–æ –≤–∞–ª—é—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è."""
    query = update.callback_query
    operation_type = context.user_data.get("operation_type")
    wallet_name = context.user_data.get("selected_wallet")
    category_name = context.user_data.get("selected_category")
    subcategory_name = query.data.split("_")[1]

    if delete_subcategory(operation_type, wallet_name, category_name, subcategory_name):
        await query.edit_message_text(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (–≤–∞–ª—é—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞).")
        await show_subcategories(update, context)
    else:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '{subcategory_name}'.")

async def delete_wallet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    wallets = get_wallets()

    if not wallets:
        await update.callback_query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")]
            ])
        )
        return

    buttons = [[InlineKeyboardButton(wallet, callback_data=f"deletewallet_{wallet}")] for wallet in wallets]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])

    await update.callback_query.edit_message_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
async def confirm_delete_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.
    """
    query = update.callback_query
    wallet_name = context.user_data.get("selected_wallet")
    currency_name = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not wallet_name or not currency_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    wallet = data["wallets"].get(wallet_name, {})

    if "currencies" not in wallet or currency_name not in wallet["currencies"]:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª—é—Ç–∞ '{currency_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—à–µ–ª—å–∫–µ.")
        return

    # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É
    del wallet["currencies"][currency_name]
    data["wallets"][wallet_name] = wallet
    save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await query.edit_message_text(f"‚úÖ –í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    # üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    await show_currency_menu(update, context)

async def confirm_delete_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –≤–∞–ª—é—Ç.
    """
    query = update.callback_query
    wallet_name = query.data.split("_")[1]

    data = load_data()
    if wallet_name not in data["wallets"]:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
        return

    del data["wallets"][wallet_name]
    save_data(data)

    await query.edit_message_text(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ '{wallet_name}' –∏ –≤—Å–µ –µ–≥–æ –≤–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    await show_wallet_menu(update, context)

async def show_wallets_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ö –±–∞–ª–∞–Ω—Å–∞."""
    data = load_data()
    wallets = data.get("wallets", {})

    if not wallets:
        await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π!", show_alert=True)
        return

    buttons = [[InlineKeyboardButton(wallet, callback_data=f"balance_{wallet}")] for wallet in wallets]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])

    reply_markup = InlineKeyboardMarkup(buttons)

    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –±–∞–ª–∞–Ω—Å:", reply_markup=reply_markup
    )

async def dispaly_wallet_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏."""
    try:
        wallet_name = context.user_data.get("selected_wallet")

        if not wallet_name:
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text="‚ùå –û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω."
            )
            return

        # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = load_data()
        wallet = data["wallets"].get(wallet_name, {})

        if "currencies" not in wallet or not wallet["currencies"]:
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=f"üí∞ –ö–æ—à–µ–ª–µ–∫ '{wallet_name}' –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤."
            )
            return

        # üî• –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º (–≤—Å–µ –≤–∞–ª—é—Ç—ã –≤ –∫–æ—à–µ–ª—å–∫–µ)
        balances_text = "\n".join(
            [f"üíµ {currency}: {balance}" for currency, balance in wallet["currencies"].items()]
        )

        if update.message:
            await update.message.reply_text(
                text=f"üìä *–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞* '{wallet_name}':\n{balances_text}",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_wallet_balance")],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            )
        elif update.callback_query:
            await update.callback_query.message.edit_text(
                text=f"üìä *–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞* '{wallet_name}':\n{balances_text}",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_wallet_balance")],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=f"üìä *–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞* '{wallet_name}':\n{balances_text}",
                parse_mode="Markdown"
            )

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ dispaly_wallet_balance: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫."""


    query = update.callback_query
    if "prev_menu" not in context.user_data:
        context.user_data["prev_menu"] = []
    try:
        if query is None:
            if update.message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            logging.error("‚ùå –û—à–∏–±–∫–∞: callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return


        elif query.data == "show_wallets_balance":

            await show_wallets_balance(update, context)


        elif query.data == "check_wallet_balance":

            context.user_data["checking_balance"] = True

            wallets = get_wallets()

            if not wallets:

                if query.message:

                    await query.message.edit_text(

                        "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.",

                        reply_markup=InlineKeyboardMarkup([

                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")],

                            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]  # ‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞

                        ])

                    )

                else:

                    await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

                return

            buttons = [[InlineKeyboardButton(wallet, callback_data=f"balance_{wallet}")] for wallet in wallets]

            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_wallet_menu")])

            buttons.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É

            if query.message:

                await query.message.edit_text(

                    "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å:",

                    reply_markup=InlineKeyboardMarkup(buttons)

                )

            else:

                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)


        elif query.data.startswith("balance_"):

            wallet_name = query.data.split("_")[1]

            context.user_data["selected_wallet"] = wallet_name  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫

            await dispaly_wallet_balance(update, context)

        elif query.data == "add_wallet":
            await add_wallet_handler(update, context)
        elif query.data == "delete_wallet":
            await delete_wallet_handler(update, context)

        elif query.data.startswith("deletewallet_"):
            await confirm_delete_wallet(update, context)
        await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞ Telegram
        logging.info(f"callback_query: {query.data}")

        # ‚úÖ –í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞
        if query.data.startswith("wallet_"):
            context.user_data["prev_menu"].append("wallet_menu")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            wallet_name = query.data.split("_")[1]
            context.user_data["selected_wallet"] = wallet_name

            await query.edit_message_text(
                text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—à–µ–ª–µ–∫: {wallet_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥", callback_data="operation_income")],
                    [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="operation_expense")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        # ‚úÖ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥) ‚Üí –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif query.data in ["operation_expense", "operation_income"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            context.user_data["prev_menu"].append("wallet_menu")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)
            operation_type = "income" if query.data == "operation_income" else "expense"
            context.user_data["operation_type"] = operation_type
            wallet_name = context.user_data.get("selected_wallet")

            categories = get_categories(operation_type, wallet_name)

            if not categories:
                await query.edit_message_text(
                    text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {'–¥–æ—Ö–æ–¥–∞' if operation_type == 'income' else '—Ä–∞—Å—Ö–æ–¥–∞'} –Ω–µ—Ç.\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
                    ])
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await query.edit_message_text(
                text=f"üìÇ –í—ã –≤—ã–±—Ä–∞–ª–∏: {'–î–æ—Ö–æ–¥' if operation_type == 'income' else '–†–∞—Å—Ö–æ–¥'}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup([
                    *[[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories],
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                    [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        elif query.data == "add_category":
            await add_category_handler(update, context)
        elif query.data == "delete_category":
            await delete_category_handler(update, context)

        elif query.data.startswith("deletecat_"):
            await confirm_delete_category(update, context)
        # ‚úÖ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif query.data.startswith("category_"):
            context.user_data["prev_menu"].append("category_menu")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            category_name = query.data.split("_")[1]
            context.user_data["selected_category"] = category_name

            subcategories = get_subcategories(context.user_data["operation_type"], context.user_data["selected_wallet"],
                                              category_name)

            await query.edit_message_text(
                text=f"üè∑ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup([
                    *[[InlineKeyboardButton(subcat, callback_data=f"subcategory_{subcat}")] for subcat in
                      subcategories],
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        elif query.data == "add_subcategory":
            await add_subcategory_handler(update, context)
        elif query.data == "delete_subcategory":
            await delete_subcategory_handler(update, context)

        elif query.data.startswith("deletesubcat_"):
            await confirm_delete_subcategory(update, context)
        # ‚úÖ –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
        elif query.data.startswith("subcategory_"):
            context.user_data["prev_menu"].append("subcategory_menu")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            subcategory_name = query.data.split("_")[1]
            context.user_data["selected_subcategory"] = subcategory_name

            await show_currency_menu(update, context)

        elif query.data == "add_currency":
            await add_currency_handler(update, context)
        elif query.data == "delete_currency":
            await delete_currency_handler(update, context)

        elif query.data.startswith("deletecurrency_"):
            await confirm_delete_currency(update, context)

        # ‚úÖ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã ‚Üí –í–≤–æ–¥–∏–º —Å—É–º–º—É
        elif query.data.startswith("currency_"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            context.user_data["prev_menu"].append("subcategory_menu")

            currency_name = query.data.split("_")[1]
            context.user_data["currency"] = currency_name

            await query.edit_message_text(
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: {currency_name}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_amount")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subcategory_menu")]
                ])
            )
            context.user_data["action"] = "add_amount"
        elif query.data == "back_to_subcategory_menu":
            await show_subcategories(update, context)  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            context.user_data["action"] = "add_amount"

        # ‚úÖ –ü—Ä–æ–ø—É—Å–∫ —Å—É–º–º—ã ‚Üí –í–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏
        elif query.data == "skip_amount":
            context.user_data["amount"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
                ])
            )
            context.user_data["action"] = "add_comment"

        # ‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫
        elif query.data == "skip_comment":
            context.user_data["comment"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            await query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_receipt")]
                ])
            )
            context.user_data["action"] = "upload_receipt"
        elif query.data == "edit_amount":
            await edit_amount(update, context)


        # ‚úÖ –ü—Ä–æ–ø—É—Å–∫ —á–µ–∫–∞ ‚Üí –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        elif query.data == "skip_receipt":
            context.user_data["receipt_id"] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            await save_operation(update,context)
            await query.edit_message_text(
                "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data="start")]
                ])
            )
        elif query.data == "dispaly_wallet_balance":
            await dispaly_wallet_balance(update, context)
            await update.message.reply_text(
                "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", callback_data="start")]
                ])
            )



        elif query.data == "back":

            if context.user_data["prev_menu"]:

                last_menu = context.user_data["prev_menu"].pop()  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é

                if last_menu == "wallet_menu":

                    await show_wallet_menu(update, context)


                elif last_menu == "operation_menu":

                    await callback_handler(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π


                elif last_menu == "category_menu":

                    await show_categories(update, context)


                elif last_menu == "subcategory_menu":

                    await show_subcategories(update, context)


                elif last_menu == "currency_menu":

                    await show_currency_menu(update, context)


                else:

                    await show_wallet_menu(update, context)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            else:

                await show_wallet_menu(update, context)  # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, –≤–µ—Ä–Ω–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


        elif query.data == "start":

            await show_wallet_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


        # ‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é ‚Üí –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif query.data == "start":
            await show_wallet_menu(update, context)  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ–Ω—é


    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        await context.bot.send_message(chat_id=query.from_user.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def save_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –≤ –∫–æ—à–µ–ª—å–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ.
    """
    try:
        wallet_name = context.user_data.get("selected_wallet")
        operation_type = context.user_data.get("operation_type")
        currency = context.user_data.get("currency")
        amount = context.user_data.get("amount")

        if not wallet_name or not currency or amount is None:
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã."
            )
            return

        # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = load_data()
        wallet = data["wallets"].get(wallet_name, {})

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `currencies` - —ç—Ç–æ **—Å–ª–æ–≤–∞—Ä—å**, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫!
        if "currencies" not in wallet or not isinstance(wallet["currencies"], dict):
            wallet["currencies"] = {}  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ —Ç–∞–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
        if currency not in wallet["currencies"]:
            wallet["currencies"][currency] = 0  # –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å 0

        current_balance = wallet["currencies"][currency]

        # üî• –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
        if operation_type == "expense":
            if current_balance < amount:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, text=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ {currency}! –ë–∞–ª–∞–Ω—Å: {current_balance}"
                )
                return
            new_balance = current_balance - amount
        else:  # income
            new_balance = current_balance + amount

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
        wallet["currencies"][currency] = new_balance
        data["wallets"][wallet_name] = wallet
        save_data(data)  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        logging.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å {currency} –≤ –∫–æ—à–µ–ª—å–∫–µ '{wallet_name}' –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")

        # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        operations_sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("–û–ø–µ—Ä–∞—Ü–∏–∏")
        check_id = context.user_data.get("receipt_id", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")
        category_name = context.user_data.get("selected_category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        subcategory_name = context.user_data.get("selected_subcategory", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        comment = context.user_data.get("comment", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")

        operations_sheet.append_row([
            date, operation_type, wallet_name, category_name, subcategory_name, currency, amount, comment, check_id
        ])

        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É!")

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ Telegram
        await dispaly_wallet_balance(update, context)

        # üîÑ –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ save_operation: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def save_operation_and_return_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        wallet_name = context.user_data.get("selected_wallet", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        operation_type = context.user_data.get("operation_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        category_name = context.user_data.get("selected_category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        subcategory_name = context.user_data.get("selected_subcategory", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        currency = context.user_data.get("currency", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        amount = context.user_data.get("amount")
        comment = context.user_data.get("comment", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")
        receipt_id = context.user_data.get("receipt_id", "–ü—Ä–æ–ø—É—â–µ–Ω–æ")  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        logging.info(f"üìä –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: {operation_type}, {wallet_name}, {currency}, {amount}, —á–µ–∫ ID: {receipt_id}")

        if amount is None or not isinstance(amount, (int, float)) or amount <= 0:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        data = load_data()
        wallet = data["wallets"].get(wallet_name, {})

        if "currencies" not in wallet:
            wallet["currencies"] = {}

        if currency not in wallet["currencies"]:
            wallet["currencies"][currency] = 0

        current_balance = wallet["currencies"][currency]

        if operation_type == "expense":
            new_balance = current_balance - amount
        else:
            new_balance = current_balance + amount

        wallet["currencies"][currency] = new_balance
        data["wallets"][wallet_name] = wallet
        save_data(data)

        logging.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å {currency} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")

        # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        operations_sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("–û–ø–µ—Ä–∞—Ü–∏–∏")
        operations_sheet.append_row([
            date, operation_type, wallet_name, category_name, subcategory_name, currency, amount, comment, receipt_id
        ])

        logging.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets —Å ID —á–µ–∫–∞: {receipt_id}")

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Telegram
        await dispaly_wallet_balance(update, context)

        # üîÑ –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        context.user_data.clear()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ —á–µ–∫–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message or not update.message.photo:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
            return

        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
        file_id = photo.file_id  # ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –≤ Telegram
        check_id = generate_check_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–µ–∫–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É —Å ID —á–µ–∫–∞
        await context.bot.send_photo(
            chat_id=GROUP_CHAT_ID,
            photo=file_id,
            caption=f"–ß–µ–∫ —Å ID: {check_id}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data["receipt_id"] = check_id

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç—É
        await save_operation_and_return_to_start(update, context)

    except AttributeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ AttributeError –≤ photo_handler: {e}")
        if update.message:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            logging.error("update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ photo_handler: {e}")
        if update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            logging.error("update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await start(update, context)
    await update.message.reply_text("üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö."""
    await update.message.reply_text(
        "üîó –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —á–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úâ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url="https://t.me/mwnhn")]
        ])
    )

def main():


    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    migrate_json_structure()



    application = Application.builder().token("7351753880:AAEVLbjdQp_etMQAIWp6flU-ZdjaQltVNAE").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.PHOTO, handle_receipt_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_receipt_document))
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("update", update_command))
    application.add_handler(CommandHandler("report", report_command))
    application.run_polling()


if __name__ == "__main__":
    main()
